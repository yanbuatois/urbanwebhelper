{"version":3,"sources":["../routes/collection.js"],"names":["express","require","router","fs","icu","_","req","totalTailleCollec","result","item","nbPages","Math","page","fullcollection","promesses","ownedOnly","nbPerPage","sortBy","results","Promise","index","cartes","unResultat","valeurs","niveaux","zeroxp","full","collectionitem","listeValeurs","val0xp","valfull","carte","vfull","charactersIDs","id","nb","nbCartes","valeur","valeurTexte","console","res","error","e","default","summary","totalSummary","err","min","totalCartes","nbOwnedTotal","memo","queries","i","pages","pagesPlates","doublesPairs","value","doubles","elt","prix","reponse","persos","parseInt","name","valeursTri","b","a","valeursTriPallier","semis","recupSemiEvo","listeclans","maxLevels","filtrees","date","Number","recupFaibleDiff","listePersos","accumulator","currentValue","groupBy","collec","listeIDs","characterInCollectionIDs","urApi","items","clans","clansGroups","clan_name","raritiesGroup","rarity","raritiesNb","sortby","pouvoirsComptes","char","pouvoirsUniques","persosPouvoirsUniques","semiPersos","perso","semiNiveauxResultats","level_max","characterID","levelMax","semiNiveauxCartes","test","entree","semiNiveauxMerged","semiNiveauxSeuls","ability_id","level","power","infosCartesFD","listeFiltree","precedent","precedentScore","resultat","score","totalScorePerso","listeFiltreeMerged","module"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst fs = require('fs');\r\nconst icu = require('full-icu');\r\nconst _ = require('underscore');\r\n\r\nrouter.get('/', async function(req, res, next) {\r\n    req.urApi.query('collections.getSummary')\r\n        .then(async function(result) {\r\n            try {\r\n                let totalTailleCollec = 0;\r\n                result.items.forEach((item) => {\r\n                    totalTailleCollec += item.nbOwnedTotal;\r\n                });\r\n\r\n                let nbPages = Math.ceil(totalTailleCollec / 52);\r\n\r\n                let analyse, fullcollection, page, infoCollec;\r\n                page = 0;\r\n                fullcollection = [];\r\n\r\n                let promesses = [];\r\n                promesses[0] = req.urApi.query('collections.getClanSummary', {\r\n                    ownedOnly: true,\r\n                });\r\n                for (let page = 0; page < nbPages; ++page) {\r\n                    promesses[1 + page] = req.urApi.query('collections.getCollectionPage', {\r\n                        page,\r\n                        nbPerPage: 52,\r\n                        sortBy: \"clan\",\r\n                    });\r\n                }\r\n\r\n                const results = await Promise.all(promesses);\r\n\r\n                results.forEach((unResultat, index) => {\r\n                    if (index === 0) {\r\n                        cartes = unResultat.items;\r\n                    } else {\r\n                        fullcollection = fullcollection.concat(unResultat.items);\r\n                    }\r\n                });\r\n\r\n                // const cartes = (await req.urApi.query('characters.getCharacters')).items;\r\n                let valeurs = {};\r\n\r\n                // cartes.forEach(async (item) => {\r\n                // for(let i = 0; i < cartes.length; ++i) {\r\n                await Promise.all(cartes.map(async(carte) => {\r\n                    // const item = cartes[i];\r\n                    const item = carte;\r\n                    const niveaux = {\r\n                        zeroxp: 0,\r\n                        full: 0,\r\n                    };\r\n                    fullcollection.forEach((collectionitem) => {\r\n                        if (collectionitem.id === item.id) {\r\n                            if (collectionitem.level === 1 && collectionitem.xp === 0) {\r\n                                niveaux.zeroxp++;\r\n                            } else {\r\n                                niveaux.full++;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n\r\n                    try {\r\n                        const listeValeurs = {\r\n                            val0xp: 0,\r\n                            valfull: 0,\r\n                        };\r\n\r\n                        if (carte.is_tradable && (niveaux.zeroxp || niveaux.full)) {\r\n                            const vfull = (await req.urApi.query('market.getCharactersPricesCurrent', {\r\n                                charactersIDs: item.id\r\n                            }));\r\n\r\n                            const nb = vfull.items[0].min;\r\n\r\n                            listeValeurs.valfull = nb * niveaux.full;\r\n                            listeValeurs.val0xp = nb * 1.1 * niveaux.zeroxp;\r\n                        }\r\n\r\n                        const nbCartes = niveaux.zeroxp + niveaux.full;\r\n                        const valeur = listeValeurs.val0xp + listeValeurs.valfull;\r\n\r\n                        valeurs[item.name] = {\r\n                            nbCartes: nbCartes,\r\n                            valeur: Math.floor(valeur),\r\n                            valeurTexte: Math.floor(valeur).toLocaleString(\"fr-FR\"),\r\n                        };\r\n\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                        res.render('errors/error', { error: e });\r\n                    }\r\n                }));\r\n\r\n                // console.log(valeurs);\r\n\r\n                // console.log(cartes);\r\n                // console.log(result.items);\r\n\r\n                res.render('collection', {\r\n                    default: req.default,\r\n                    summary: result.items,\r\n                    valeurs,\r\n                    totalSummary: cartes,\r\n                });\r\n            } catch (e) {\r\n                console.error(e);\r\n                res.render('errors/error', { error: e });\r\n            }\r\n        })\r\n        .catch(err => {\r\n            console.error(err);\r\n            res.render('errors/error', { error: err });\r\n        })\r\n});\r\n\r\nrouter.get('/doubles/:montant?', async(req, res, next) => {\r\n    try {\r\n        const min = (req.params.montant) ? req.params.montant : 0;\r\n        const summary = (await req.urApi.query(\"collections.getSummary\")).items;\r\n        // console.log(summary);\r\n        // summary.forEach((element) => {\r\n        //   if(element.id === 1760)\r\n        //     console.log(element);\r\n        // })\r\n        // const totalCartes = summary.reduce((memo, {nbOwnedDistinct, nbOwnedTotal}) => memo + (nbOwnedTotal-nbOwnedDistinct), 0);\r\n        const totalCartes = summary.reduce((memo, { nbOwnedTotal }) => memo + nbOwnedTotal, 0);\r\n        const nbPages = Math.ceil(totalCartes / 52);\r\n        const queries = [];\r\n        console.log(totalCartes);\r\n        console.log(nbPages);\r\n        for (let i = 0; i < nbPages; ++i) {\r\n            queries[i] = req.urApi.query(\"collections.getCollectionPage\", {\r\n                page: i,\r\n                nbPerPage: 52,\r\n                // groupBy: \"double\",\r\n            });\r\n        }\r\n\r\n        const pages = (await (Promise.all(queries))).map((item) => item.items);\r\n        const pagesPlates = _.flatten(pages);\r\n        const doublesPairs = _.pairs(_.pick(_.countBy(pagesPlates, ({ id }) => id), (value) => value >= 2));\r\n        // console.log(doublesPairs);\r\n        const doubles = doublesPairs.map((elt) => ({ id: elt[0], nb: elt[1] }));\r\n        // const ids = ;\r\n        const prix = _.flatten((await Promise.all(doubles.map(({ id }) => req.urApi.query(\"market.getCharactersPricesCurrent\", {\r\n            charactersIDs: id,\r\n        })))).map((reponse) => reponse.items));\r\n\r\n        const persos = (await req.urApi.query(\"characters.getCharacters\")).items;\r\n        // console.log(prix);\r\n        const valeurs = doubles.map(({ id, nb }) => ({ id: parseInt(id), prix: nb * (prix.find(elt => (parseInt(id) === elt.id)).min), name: (persos.find(elt => (parseInt(id) === elt.id)).name) }));\r\n        const valeursTri = valeurs.sort((a, b) => b.prix - a.prix);\r\n        const valeursTriPallier = valeurs.filter(({ prix }) => prix >= min);\r\n\r\n\r\n        // console.log((await req.urApi.query(\"characters.getCharacters\")).items);\r\n        // console.log(summary);\r\n        // console.log(pagesPlates);\r\n        // console.log(prix);\r\n        // console.log(prix);\r\n        // console.log(doubles);\r\n        res.render('listedoubles', { doubles: valeursTriPallier, default: req.default });\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.render('errors/error', { error });\r\n    }\r\n\r\n});\r\n\r\nrouter.get('/listesemi', async(req, res, next) => {\r\n    try {\r\n        const semis = await recupSemiEvo(req.urApi);\r\n        // let listeclans = semis.map(({clan_name, clan_id}) => ({clan_name, clan_id}));\r\n        // listeclans = _.uniq(listeclans);\r\n        const listeclans = (await req.urApi.query(\"characters.getClans\")).items;\r\n        // console.log(listeclans);\r\n        res.render('listesemi', { listeclans, semis, default: req.default, })\r\n    } catch (error) {\r\n        console.log(error);\r\n        res.render('errors/error', { error });\r\n    }\r\n});\r\n\r\nrouter.get('/annee', async(req, res, next) => {\r\n    const cartes = await req.urApi.query('characters.getCharacters', { maxLevels: true });\r\n    const filtrees = cartes.items.filter((value) => {\r\n        const date = new Date(Number(value.release_date) * 1000);\r\n        // date.setTime(value.release_date);\r\n        console.log(date.getFullYear());\r\n        return date.getFullYear() === 2018;\r\n        // return console.log(value);\r\n    });\r\n\r\n    console.log(filtrees.length);\r\n});\r\n\r\nrouter.get('/faiblediff', async(req, res, next) => {\r\n    try {\r\n        const listeclans = (await req.urApi.query(\"characters.getClans\")).items;\r\n        const semis = (await recupFaibleDiff(req.urApi));\r\n\r\n        res.render('listesemi', { listeclans, semis, default: req.default });\r\n    } catch (error) {\r\n        console.log(error);\r\n        res.render('errors/error', { error });\r\n    }\r\n});\r\n\r\nrouter.get('/fulldeck', async (req, res, next) => {\r\n    try {\r\n        const listePersos = (await req.urApi.query('collections.getSummary')).items;\r\n\r\n        const nbCartes = listePersos.reduce(((accumulator, currentValue) => accumulator + currentValue.nbOwnedDistinct),0 );\r\n\r\n        const nbPages = Math.ceil(nbCartes / 52);\r\n\r\n        const promesses = [];\r\n        for (let i = 0; i < nbPages; ++i) {\r\n            promesses.push(req.urApi.query('collections.getCollectionPage', {\r\n                page: i,\r\n                nbPerPage: 52,\r\n                groupBy: 'best',\r\n            }));\r\n        }\r\n\r\n        const pages = (await Promise.all(promesses)).map(elt => elt.items);\r\n        const collec = _.flatten(pages);\r\n\r\n        const listeIDs = collec.map(elt => elt.id_player_character);\r\n\r\n        await req.urApi.query('collections.setSelectionAsDeck', {\r\n            characterInCollectionIDs: listeIDs,\r\n        });\r\n\r\n        res.redirect('/');\r\n    } catch (error) {\r\n        console.log(error);\r\n        res.render('errors/error', { error });\r\n    }\r\n});\r\n\r\nrouter.get('/rarities', async (req, res, next) => {\r\n    const {urApi} = req;\r\n    try {\r\n        const { items } = await urApi.query('characters.getCharacters', { maxLevels: true });\r\n\r\n        // console.log(items);\r\n        const clans = {};\r\n        const clansGroups = _.groupBy(items, ({ clan_name }) => clan_name);\r\n\r\n        for (const clansKey in clansGroups) {\r\n            const raritiesGroup = _.groupBy(clansGroups[clansKey], ({ rarity }) => rarity);\r\n\r\n            const raritiesNb = {};\r\n            for (const key in raritiesGroup) {\r\n                raritiesNb[key] = raritiesGroup[key].length;\r\n            }\r\n\r\n            clans[clansKey] = raritiesNb;\r\n        }\r\n\r\n        console.log(clans);\r\n        res.redirect('/');\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.render('errors/error', { error });\r\n    }\r\n});\r\n\r\nrouter.get('/listePouvoirsUniques', async(req, res, next) => {\r\n    const urApi = req.urApi;\r\n    try {\r\n        const { items } = await urApi.query(\"characters.getCharacters\", { sortby: 'clan', maxLevels: true });\r\n        const pouvoirsComptes = _.countBy(items, (char) => char.ability);\r\n        const pouvoirsUniques = _.keys(_.pick(pouvoirsComptes, (value) => value === 1));\r\n        const persosPouvoirsUniques = _.filter(items, (item) => pouvoirsUniques.includes(item.ability));\r\n        // console.log(persosPouvoirsUniques);\r\n        const listeclans = (await urApi.query(\"characters.getClans\")).items;\r\n\r\n        res.render('listesemi', { listeclans, semis: persosPouvoirsUniques, default: req.default });\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.render('errors/error', { error });\r\n    }\r\n});\r\n\r\nrouter.get('/missions/')\r\n\r\n/**\r\n *\r\n * @param urApi {module.UrbanOAuth}\r\n * @return {Promise<Array<Object>>}\r\n */\r\nasync function recupSemiEvo(urApi) {\r\n    const { items } = await urApi.query(\"characters.getCharacters\", { sortby: 'clan' /*, maxLevels: true*/ });\r\n    // console.log(items);\r\n    const semiPersos = items.filter(perso => ((perso.level_max > perso.ability_unlock_level && perso.ability_id !== 0) || (perso.level_min === 1 && perso.power >= 6)));\r\n    // console.log(semiPersos);\r\n\r\n\r\n\r\n    const semiNiveauxResultats = await Promise.all(semiPersos.map(({ id, level_max }) => urApi.query(\"characters.getCharacterLevels\", { characterID: id, levelMax: level_max - 1 })));\r\n    const semiNiveauxCartes = semiNiveauxResultats.map(({ items }) => items);\r\n    const test = semiNiveauxCartes.filter(entree => entree.id === 140);\r\n    // console.log(test);\r\n\r\n    const semiNiveauxMerged = [].concat.apply([], semiNiveauxCartes);\r\n\r\n    const semiNiveauxSeuls = semiNiveauxMerged.filter(({ level, ability_unlock_level, level_max, power, ability_id }) => (((level_max > ability_unlock_level) && (level >= ability_unlock_level) && (ability_id !== 0)) || (level === 1 && power >= 6)));\r\n\r\n    return semiNiveauxSeuls;\r\n}\r\n\r\n/**\r\n *\r\n * @param urApi {module.UrbanOAuth}\r\n * @return {Promise<Array<Object>>}\r\n */\r\nasync function recupFaibleDiff(urApi) {\r\n    const { items } = await urApi.query(\"characters.getCharacters\", { sortby: 'clan' });\r\n    const infosCartesFD = await Promise.all(items.map(({ id }) => urApi.query(\"characters.getCharacterLevels\", { characterID: id })));\r\n    const listeFiltree = (infosCartesFD.map(({ items }) => {\r\n        let precedent = [];\r\n        let precedentScore = 0;\r\n        const resultat = [];\r\n        for (const element of items) {\r\n            const score = totalScorePerso(element);\r\n            // if(element.id === 418) {\r\n            //   // console.log(element);\r\n            //   console.log(precedentScore);\r\n            //   console.log(score);\r\n            // }\r\n            if (precedent !== []) {\r\n                if (score <= precedentScore + 1) {\r\n                    //          console.log('ajout');\r\n                    resultat.push(precedent);\r\n                }\r\n            }\r\n            precedentScore = score;\r\n            precedent = element;\r\n        }\r\n\r\n        return resultat;\r\n    })).filter((elt) => (elt !== []));\r\n    const listeFiltreeMerged = [].concat.apply([], listeFiltree);\r\n\r\n    return listeFiltreeMerged;\r\n}\r\n\r\n/**\r\n *\r\n * @param perso\r\n * @return {number}\r\n */\r\nconst totalScorePerso = (perso) => perso.damage + perso.power + (perso.ability_id !== 0 ? 1 : 0);\r\n\r\nmodule.exports = router;\r\n"],"file":"collection.js"}